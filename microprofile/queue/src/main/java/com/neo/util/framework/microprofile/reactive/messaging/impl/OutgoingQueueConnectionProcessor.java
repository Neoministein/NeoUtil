package com.neo.util.framework.microprofile.reactive.messaging.impl;

import com.google.auto.service.AutoService;
import com.neo.util.common.impl.annotation.ProcessorUtils;
import com.neo.util.framework.api.queue.OutgoingQueueConnection;
import com.neo.util.framework.api.queue.QueueProducer;
import com.squareup.javapoet.*;
import jakarta.enterprise.context.ApplicationScoped;
import org.eclipse.microprofile.reactive.messaging.Outgoing;
import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;
import org.reactivestreams.FlowAdapters;
import org.reactivestreams.Publisher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.util.Elements;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.SubmissionPublisher;

@SupportedAnnotationTypes("com.neo.util.framework.api.queue.OutgoingQueueConnection")
@AutoService(Processor.class)
public class OutgoingQueueConnectionProcessor extends AbstractProcessor {

    private static final Logger LOGGER = LoggerFactory.getLogger(OutgoingQueueConnectionProcessor.class);

    protected static final String PACKAGE_LOCATION = "com.neo.util.framework.microprofile.reactive.messaging";

    protected static final String BASIC_ANNOTATION_FIELD_NAME = "value";
    protected static final String QUEUE_PREFIX = "to-";

    protected Filer filer;
    protected Elements elements;
    protected Map<String, String> existingIncomingAnnotation = new HashMap<>();
    protected Map<String, String> generatedClasses = new HashMap<>();

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.filer = processingEnv.getFiler();
        this.elements = processingEnv.getElementUtils();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        List<TypeElement> queueProducerElements = ProcessorUtils.getTypedElementsAnnotatedWith(roundEnv,
                elements, OutgoingQueueConnection.class, List.of(ElementKind.CLASS));
        if (queueProducerElements.isEmpty()) {
            return false;
        }
        LOGGER.debug("Generating associated files for {} annotation", OutgoingQueueConnection.class.getName());
        Set<? extends Element> incomingElements = roundEnv.getElementsAnnotatedWith(Outgoing.class);
        for (Element element: incomingElements) {
            Parameterizable parameterizable = (Parameterizable) element;
            existingIncomingAnnotation.put(ProcessorUtils.getAnnotationValue(element, Outgoing.class,
                            BASIC_ANNOTATION_FIELD_NAME),
                    parameterizable.getEnclosingElement().getSimpleName().toString());
        }
        LOGGER.debug("Existing queues {}", existingIncomingAnnotation);

        for (TypeElement typeElement: queueProducerElements) {
            String queueName = ProcessorUtils.getAnnotationValue(typeElement, OutgoingQueueConnection.class,
                    BASIC_ANNOTATION_FIELD_NAME);

            String existingQueueAnnotationClass = existingIncomingAnnotation.get(QUEUE_PREFIX + queueName);
            if (existingQueueAnnotationClass != null) {
                LOGGER.debug("Skipping outgoing class generation for queue {}. It is already in use in {}", queueName, existingQueueAnnotationClass);
                break;
            }

            String alreadyGeneratedClass = generatedClasses.get(queueName);
            if (alreadyGeneratedClass != null) {
                LOGGER.debug("Skipping outgoing class generation for queue {}. It has already been generated by {}", queueName, alreadyGeneratedClass);
                break;
            }

            createConsumeClass(queueName, typeElement);
            generatedClasses.put(queueName, typeElement.getSimpleName().toString());
        }
        return false;
    }

    protected void createConsumeClass(String queueName, TypeElement typeElement) {
        try {
            String className = parseToClassName(queueName);
            FieldSpec queueEmitter = FieldSpec.builder(ParameterizedTypeName.get(SubmissionPublisher.class, String.class), "emitter")
                    .addModifiers(Modifier.PROTECTED, Modifier.FINAL)
                    .initializer("new $T<>()", SubmissionPublisher.class)
                    .build();
            MethodSpec addToQueue = MethodSpec.methodBuilder("addToQueue")
                    .addModifiers(Modifier.PUBLIC)
                    .returns(void.class)
                    .addAnnotation(Override.class)
                    .addParameter(String.class, "msg")
                    .addStatement("emitter.submit(msg)")
                    .build();
            MethodSpec produceToQueue = MethodSpec.methodBuilder("addToQueue")
                    .addModifiers(Modifier.PUBLIC)
                    .returns(ParameterizedTypeName.get(Publisher.class, String.class))
                    .addAnnotation(AnnotationSpec.builder(Outgoing.class)
                            .addMember(BASIC_ANNOTATION_FIELD_NAME, "$S", QUEUE_PREFIX + queueName).build())
                    .addStatement("return $T.fromPublisher($T.toPublisher(emitter)).buildRs()", ReactiveStreams.class, FlowAdapters.class)
                    .build();
            MethodSpec getQueueName = MethodSpec.methodBuilder("getQueueName")
                    .addModifiers(Modifier.PUBLIC)
                    .returns(String.class)
                    .addAnnotation(Override.class)
                    .addStatement("return $S", queueName)
                    .build();

            TypeSpec callerClass = TypeSpec.classBuilder(className)
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(ApplicationScoped.class)
                    .addSuperinterface(QueueProducer.class)
                    .addMethod(addToQueue)
                    .addMethod(produceToQueue)
                    .addMethod(getQueueName)
                    .addField(queueEmitter)
                    .build();

            JavaFile javaFile = JavaFile.builder(PACKAGE_LOCATION, callerClass).build();

            LOGGER.debug("Generating src file {}", className);
            javaFile.writeTo(filer);
        } catch (Exception ex) {
            throw new IllegalArgumentException("Unable to generate src file for " + typeElement.getSimpleName().toString(), ex);
        }
    }

    protected String parseToClassName(String queueName) {
        String nonNumeric = queueName.replaceAll("[^a-zA-Z]", "");
        return nonNumeric.substring(0, 1).toUpperCase() + nonNumeric.substring(1) + "Producer";
    }

}
